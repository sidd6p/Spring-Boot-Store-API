{
	"info": {
		"_postman_id": "34a5df93-f842-4371-b3e5-d4220b8521eb",
		"name": "Spring-Boot-Store-API",
		"description": "Complete API documentation for the Spring Boot Store application. This collection includes endpoints for user management, product catalog, shopping cart, authentication, and admin operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37763925"
	},
	"item": [
		{
			"name": "Home",
			"item": [
				{
					"name": "Home",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Returns the main home page of the application. This endpoint renders an HTML page using Thymeleaf template engine.\n\n**Response Type:** HTML\n\n**Authentication:** Not required"
					},
					"response": []
				}
			],
			"description": "Home page endpoints for the web application."
		},
		{
			"name": "Message",
			"item": [
				{
					"name": "Message V1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v1/message",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"message"
							]
						},
						"description": "Returns a simple string message.\n\n**Response Type:** Plain text string\n\n**Response Example:**\n```\nHello, Earth!\n```\n\n**Authentication:** Not required"
					},
					"response": []
				},
				{
					"name": "Message V2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/v2/message",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"message"
							]
						},
						"description": "Returns a message object serialized to JSON.\n\n**Response Type:** JSON\n\n**Response Example:**\n```json\n{\n  \"message\": \"Hello, Earth!\"\n}\n```\n\n**Authentication:** Not required"
					},
					"response": []
				}
			],
			"description": "Simple message endpoints demonstrating different response types."
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"t3s@dummy.com\",\n    \"password\": \"dummypass123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticate user with email and password. Returns JWT access token in response body and sets refresh token as HTTP-only cookie.\n\n**Request Body:**\n- `email` (string, required): User's email address (must be valid email format)\n- `password` (string, required): User's password\n\n**Response:**\n```json\n{\n  \"token\": \"eyJhbGciOiJIUzM4NCJ9...\"\n}\n```\n\n**Cookies Set:**\n- `refreshToken`: HTTP-only cookie for token refresh (valid for configured duration)\n\n**Status Codes:**\n- 200: Login successful\n- 400: Invalid request format\n- 401: Invalid credentials"
					},
					"response": []
				},
				{
					"name": "Me",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Retrieve the profile information of the currently authenticated user.\n\n**Authentication:** Required (Bearer token)\n\n**Response Example:**\n```json\n{\n  \"id\": 1,\n  \"user_name\": \"TestUser\",\n  \"email\": \"test@example.com\"\n}\n```\n\n**Status Codes:**\n- 200: User details retrieved successfully\n- 401: Unauthorized (invalid or missing token)"
					},
					"response": []
				},
				{
					"name": "Validate Token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"validate"
							]
						},
						"description": "Check if the provided JWT token is valid and not expired.\n\n**Authentication:** Bearer token in Authorization header\n\n**Response:**\n```json\ntrue\n```\n\n**Status Codes:**\n- 200: Token is valid (returns `true`)\n- 400: Invalid request (missing or malformed token, returns `false`)\n- 401: Token expired or invalid (returns `false`)"
					},
					"response": []
				},
				{
					"name": "Refresh",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Generate a new access token using the refresh token from cookies.\n\n**Authentication:** Refresh token cookie (automatically sent by browser)\n\n**Response:**\n```json\n{\n  \"token\": \"eyJhbGciOiJIUzM4NCJ9...\"\n}\n```\n\n**Status Codes:**\n- 200: New access token generated successfully\n- 401: Invalid or expired refresh token"
					},
					"response": []
				}
			],
			"description": "Authentication and authorization endpoints for user login, token validation, and session management using JWT tokens."
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users?sort=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "",
									"description": "Optional: Field name to sort users by (e.g., 'name', 'email')"
								}
							]
						},
						"description": "Retrieve a list of all users in the system.\n\n**Query Parameters:**\n- `sort` (optional): Field name to sort users by (e.g., 'name', 'email', 'id')\n\n**Response Example:**\n```json\n[\n  {\n    \"id\": 1,\n    \"user_name\": \"TestUser\",\n    \"email\": \"test@example.com\"\n  },\n  {\n    \"id\": 2,\n    \"user_name\": \"AnotherUser\",\n    \"email\": \"another@example.com\"\n  }\n]\n```\n\n**Status Codes:**\n- 200: Users retrieved successfully"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2"
							]
						},
						"description": "Retrieve a specific user by their ID.\n\n**Path Parameters:**\n- `id` (required): User ID\n\n**Response Example:**\n```json\n{\n  \"id\": 2,\n  \"user_name\": \"TestUser\",\n  \"email\": \"test@example.com\"\n}\n```\n\n**Status Codes:**\n- 200: User found and returned\n- 404: User not found"
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "asfgfdv",
								"description": "Custom authentication token header",
								"type": "string"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_name\": \"TestUser123\",\n    \"email\": \"test@dummy.com\",\n    \"password\": \"dummypass123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Register a new user in the system.\n\n**Headers:**\n- `x-auth-token` (required): Custom authentication token\n\n**Request Body:**\n- `user_name` (string, required): Username\n- `email` (string, required): User's email address (must be lowercase)\n- `password` (string, required): User's password (8-20 characters)\n\n**Response:**\n```json\n{\n  \"id\": 109,\n  \"user_name\": \"TestUser123\",\n  \"email\": \"test@dummy.com\"\n}\n```\n\n**Status Codes:**\n- 201: User created successfully (Location header contains user URI)\n- 400: Invalid request or validation error"
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "asfgfdv",
								"description": "Custom authentication token header",
								"type": "string"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_name\": \"UpdatedDummyUser\",\n    \"email\": \"updated.dummy@testmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2"
							]
						},
						"description": "Update an existing user's information.\n\n**Headers:**\n- `x-auth-token` (required): Custom authentication token\n\n**Path Parameters:**\n- `id` (required): User ID to update\n\n**Request Body:**\n- `user_name` (string, optional): New username\n- `email` (string, optional): New email address\n\n**Response:**\n```json\n{\n  \"id\": 2,\n  \"user_name\": \"UpdatedDummyUser\",\n  \"email\": \"updated.dummy@testmail.com\"\n}\n```\n\n**Status Codes:**\n- 200: User updated successfully\n- 404: User not found"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2"
							]
						},
						"description": "Remove a user from the system.\n\n**Path Parameters:**\n- `id` (required): User ID to delete\n\n**Status Codes:**\n- 204: User deleted successfully (No content)\n- 404: User not found"
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"new_password\": \"newdummypass456\",\n    \"old_password\": \"dummypass123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/109/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"109",
								"change-password"
							]
						},
						"description": "Update a user's password.\n\n**Path Parameters:**\n- `id` (required): User ID\n\n**Request Body:**\n- `old_password` (string, required): Current password for verification\n- `new_password` (string, required): New password (8-20 characters)\n\n**Status Codes:**\n- 200: Password changed successfully\n- 401: Unauthorized (incorrect old password)"
					},
					"response": []
				}
			],
			"description": "APIs for managing users including CRUD operations and password management."
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Get All Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products?category=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "",
									"description": "Optional: Filter products by category name (e.g., 'Electronics', 'Clothing')"
								}
							]
						},
						"description": "Retrieve a list of all products, optionally filtered by category.\n\n**Query Parameters:**\n- `category` (optional): Category name to filter products\n\n**Response Example:**\n```json\n[\n  {\n    \"id\": 1,\n    \"name\": \"Laptop\",\n    \"price\": 999.99,\n    \"category_id\": 1\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Mouse\",\n    \"price\": 29.99,\n    \"category_id\": 1\n  }\n]\n```\n\n**Status Codes:**\n- 200: Products retrieved successfully"
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"11"
							]
						},
						"description": "Retrieve a specific product by its ID.\n\n**Path Parameters:**\n- `id` (required): Product ID\n\n**Response Example:**\n```json\n{\n  \"id\": 11,\n  \"name\": \"Test Product\",\n  \"price\": 99.99,\n  \"category_id\": 1\n}\n```\n\n**Status Codes:**\n- 200: Product found and returned\n- 404: Product not found"
					},
					"response": []
				},
				{
					"name": "Create Product",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "asfgfdv",
								"description": "Custom authentication token header",
								"type": "string"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"price\": 99.99,\n    \"name\": \"Test Product\",\n    \"category_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Register a new product in the system.\n\n**Headers:**\n- `x-auth-token` (required): Custom authentication token\n\n**Request Body:**\n- `name` (string, required): Product name\n- `price` (number, required): Product price (decimal value)\n- `category_id` (integer, required): Category ID the product belongs to\n\n**Response:**\n```json\n{\n  \"id\": 11,\n  \"name\": \"Test Product\",\n  \"price\": 99.99,\n  \"category_id\": 1\n}\n```\n\n**Status Codes:**\n- 201: Product created successfully (Location header contains product URI)\n- 400: Invalid request or validation error"
					},
					"response": []
				},
				{
					"name": "Update Product",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "asfgfdv",
								"description": "Custom authentication token header",
								"type": "string"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Product Name\",\n    \"category_id\": 2,\n    \"price\": 149.99\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"11"
							]
						},
						"description": "Update an existing product's information.\n\n**Headers:**\n- `x-auth-token` (required): Custom authentication token\n\n**Path Parameters:**\n- `id` (required): Product ID to update\n\n**Request Body:**\n- `name` (string, optional): New product name\n- `price` (number, optional): New product price\n- `category_id` (integer, optional): New category ID\n\n**Response:**\n```json\n{\n  \"id\": 11,\n  \"name\": \"Updated Product Name\",\n  \"price\": 149.99,\n  \"category_id\": 2\n}\n```\n\n**Status Codes:**\n- 200: Product updated successfully\n- 400: Invalid request\n- 404: Product not found"
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "asfgfdv",
								"description": "Custom authentication token header",
								"type": "string"
							}
						],
						"url": {
							"raw": "{{base_url}}/products/11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"11"
							]
						},
						"description": "Remove a product from the system.\n\n**Headers:**\n- `x-auth-token` (required): Custom authentication token\n\n**Path Parameters:**\n- `id` (required): Product ID to delete\n\n**Status Codes:**\n- 204: Product deleted successfully (No content)\n- 404: Product not found"
					},
					"response": []
				}
			],
			"description": "Product management APIs for CRUD operations on products and filtering by category."
		},
		{
			"name": "Cart Management",
			"item": [
				{
					"name": "Create Cart",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						},
						"description": "Create a new empty shopping cart.\n\n**Response Example:**\n```json\n{\n  \"id\": \"6a0c85c5-d498-4416-a1ab-2054f582040b\",\n  \"items\": [],\n  \"total\": 0.00\n}\n```\n\n**Status Codes:**\n- 201: Cart created successfully (Location header contains cart URI)"
					},
					"response": []
				},
				{
					"name": "Get Cart by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI5MyIsImVtYWlsIjoidGVzdEBkdW1teS5jb20iLCJuYW1lIjoiVGVzdFVzZXIxMjMiLCJyb2xlIjoiVVNFUiIsImlhdCI6MTc1OTM0ODc0NCwiZXhwIjoxNzYwMjEyNzQ0fQ.7od_Msedzit708JSHMIm3Y8dDbBfTKt4E3L_pXzhpP1xKoHRic2ouhYfw5qnEbfq",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/6a0c85c5-d498-4416-a1ab-2054f582040b",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"6a0c85c5-d498-4416-a1ab-2054f582040b"
							]
						},
						"description": "Retrieve a shopping cart by its ID.\n\n**Path Parameters:**\n- `cartID` (required): Cart UUID\n\n**Response Example:**\n```json\n{\n  \"id\": \"118414cc-59a8-4eea-9c1f-d8d2501350c5\",\n  \"items\": [\n    {\n      \"productId\": 14,\n      \"quantity\": 2,\n      \"price\": 99.99,\n      \"subtotal\": 199.98\n    }\n  ],\n  \"total\": 199.98\n}\n```\n\n**Status Codes:**\n- 200: Cart retrieved successfully\n- 404: Cart not found"
					},
					"response": []
				},
				{
					"name": "Add Item to Cart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": 14\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/6a0c85c5-d498-4416-a1ab-2054f582040b/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"6a0c85c5-d498-4416-a1ab-2054f582040b",
								"items"
							]
						},
						"description": "Add a product to the shopping cart. If the product already exists in the cart, the quantity will be increased.\n\n**Path Parameters:**\n- `cartID` (required): Cart UUID\n\n**Request Body:**\n- `productId` (integer, required): ID of the product to add\n\n**Response Example:**\n```json\n{\n  \"productId\": 14,\n  \"quantity\": 1,\n  \"price\": 99.99,\n  \"message\": \"Item added successfully\"\n}\n```\n\n**Status Codes:**\n- 200: Item added to cart successfully\n- 400: Invalid request (product doesn't exist)\n- 404: Cart not found\n- 409: Conflict (item already in cart)"
					},
					"response": []
				},
				{
					"name": "Update Cart Item Quantity",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/6a0c85c5-d498-4416-a1ab-2054f582040b/items/14",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"6a0c85c5-d498-4416-a1ab-2054f582040b",
								"items",
								"14"
							]
						},
						"description": "Update the quantity of a specific item in the cart.\n\n**Path Parameters:**\n- `cartID` (required): Cart UUID\n- `productId` (required): Product ID\n\n**Request Body:**\n- `quantity` (integer, required): New quantity (must be at least 1)\n\n**Response Example:**\n```json\n{\n  \"id\": \"6a0c85c5-d498-4416-a1ab-2054f582040b\",\n  \"items\": [\n    {\n      \"productId\": 14,\n      \"quantity\": 5,\n      \"price\": 99.99,\n      \"subtotal\": 499.95\n    }\n  ],\n  \"total\": 499.95\n}\n```\n\n**Status Codes:**\n- 200: Cart item quantity updated successfully\n- 404: Cart or item not found"
					},
					"response": []
				},
				{
					"name": "Remove Item from Cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/6a0c85c5-d498-4416-a1ab-2054f582040b/items/9",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"6a0c85c5-d498-4416-a1ab-2054f582040b",
								"items",
								"9"
							]
						},
						"description": "Remove a specific item from the shopping cart.\n\n**Path Parameters:**\n- `cartID` (required): Cart UUID\n- `productId` (required): Product ID to remove\n\n**Status Codes:**\n- 204: Item removed successfully (No content)\n- 404: Cart or item not found"
					},
					"response": []
				},
				{
					"name": "Clear Cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/118414cc-59a8-4eea-9c1f-d8d2501350c5/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"118414cc-59a8-4eea-9c1f-d8d2501350c5",
								"items"
							]
						},
						"description": "Remove all items from the shopping cart.\n\n**Path Parameters:**\n- `cartID` (required): Cart UUID\n\n**Status Codes:**\n- 204: All items removed successfully (No content)\n- 404: Cart not found"
					},
					"response": []
				}
			],
			"description": "APIs for managing shopping carts including adding, updating, and removing items."
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Hello",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/hello",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hello"
							]
						},
						"description": "Test endpoint for admin access verification. Only accessible to users with ADMIN role.\n\n**Authentication:** Required (Admin role)\n\n**Response:**\n```\nAdmin endpoint - access restricted to ADMIN role\n```\n\n**Status Codes:**\n- 200: Access granted (user has ADMIN role)\n- 403: Forbidden (user doesn't have ADMIN role)"
					},
					"response": []
				}
			],
			"description": "Admin-only endpoints with restricted access. These endpoints require ADMIN role."
		},
		{
			"name": "Checkout",
			"item": [
				{
					"name": "Checkout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiI5MyIsImVtYWlsIjoidGVzdEBkdW1teS5jb20iLCJuYW1lIjoiVGVzdFVzZXIxMjMiLCJyb2xlIjoiVVNFUiIsImlhdCI6MTc1OTM0ODc0NCwiZXhwIjoxNzYwMjEyNzQ0fQ.7od_Msedzit708JSHMIm3Y8dDbBfTKt4E3L_pXzhpP1xKoHRic2ouhYfw5qnEbfq",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"2e1726e4-a727-4e76-8f0d-230cd7a1b127\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/checkout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"checkout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		}
	]
}